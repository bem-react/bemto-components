// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`block that passes all its props to one of its children 1`] = `
<div
  className="myBlock myBlock_mod"
>
  <div
    className="myBlock__Helper"
  />
  <a
    className="myBlock__Controller"
    disabled={true}
    href="#x"
    id="LolID"
    title="my title"
  >
    hello
  </a>
</div>
`;

exports[`block that passes most of its props to one of its children 1`] = `
<div
  className="myBlock myBlock_mod"
  title="my title"
>
  <div
    className="myBlock__Helper"
    id="LolID"
  />
  <a
    className="myBlock__Controller"
    disabled={true}
    href="#x"
  >
    hello
  </a>
</div>
`;

exports[`block with a Helper before content with overridden tag name 1`] = `
<div
  className="myBlock"
>
  <strong
    className="myBlock__Helper"
  >
    hewwo
  </strong>
  <div
    className="myBlock__Content"
  >
    children text
  </div>
</div>
`;

exports[`block with a Helper having a modifier on base level 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper myBlock__Helper_elemMod"
  />
  children text
</div>
`;

exports[`block with a Helper having a modifier on base level, should override prev 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper myBlock__Helper_elemMod_new"
  />
  children text
</div>
`;

exports[`block with a Helper with function tag name (fallback test) 1`] = `
<span
  className="myBlock"
>
  <span
    className="myBlock__Helper"
  />
  <span
    className="myBlock__Content"
  >
    children text
  </span>
</span>
`;

exports[`block with a Helper with function tag name 1`] = `
<span
  className="myBlock"
  foo="bar"
>
  <strong
    className="myBlock__Helper"
  />
  <span
    className="myBlock__Content"
  >
    children text
  </span>
</span>
`;

exports[`block with a Helper with function tag name, overridden at call 1`] = `
<span
  className="myBlock"
  foo="bar"
>
  <em
    className="myBlock__Helper"
  >
    lol
  </em>
  <span
    className="myBlock__Content"
  >
    children text
  </span>
</span>
`;

exports[`block with a complex elements structure 1`] = `
<div
  className="myBlock"
>
  <span
    className="myBlock__Elem1"
  >
    <span
      className="myBlock__Elem1__Elem1"
    />
    <span
      className="myBlock__Elem1__Elem2"
    >
      <span
        className="myBlock__Elem1__Elem2__Elem1"
      />
      <span
        className="myBlock__Elem1__Elem2__Elem2"
      />
    </span>
  </span>
  <ul
    className="myBlock__Elem2"
  >
    <li
      className="myBlock__Elem2__Elem1"
    />
    <li
      className="myBlock__Elem2__Elem2"
    >
      <div
        className="myBlock__Elem2__Elem2__Elem1"
      />
      <div
        className="myBlock__Elem2__Elem2__Elem2"
      />
    </li>
  </ul>
  <span
    className="myBlock__Elem3"
  >
    <label
      className="myBlock__Elem3__Elem1"
    />
    <a
      className="myBlock__Elem3__Elem2"
      href="#x"
    >
      <span
        className="myBlock__Elem3__Elem2__Elem1"
      />
      <span
        className="myBlock__Elem3__Elem2__Elem2"
      />
    </a>
  </span>
  children text
</div>
`;

exports[`block with a more complex list system inside 1`] = `
<div
  className="myBlock"
>
  <ul
    className="myBlock__List"
  >
    <li
      className="myBlock__Item"
    >
      lol
    </li>
    <li
      className="myBlock__Item"
    >
      whatever
    </li>
  </ul>
  children text
</div>
`;

exports[`block with a more complex list system inside, now with props O_O 1`] = `
<div
  className="myBlock"
>
  <ul
    className="myBlock__List"
  >
    <li
      className="myBlock__Item myBlock__Item_mod"
    >
      lol
    </li>
    <li
      className="myBlock__Item"
    >
      whatever
    </li>
  </ul>
  children text
</div>
`;

exports[`block with a single wrapper inside without an array 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Content"
  >
    children text
  </div>
</div>
`;

exports[`block with a single wrapper inside without an array with shorter children syntax 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Content"
  >
    children text
  </div>
</div>
`;

exports[`block with a textnode Helper before content (omitTag: true at call) 1`] = `
<div
  className="myBlock"
>
  hewwo
  <div
    className="myBlock__Content"
  >
    children text
  </div>
</div>
`;

exports[`block with a textnode Helper before content (omitTag: true) 1`] = `
<div
  className="myBlock"
>
  hewwo
  <div
    className="myBlock__Content"
  >
    children text
  </div>
</div>
`;

exports[`block with a textnode Helper before content (tag: "") 1`] = `
<div
  className="myBlock"
>
  hewwo
  <div
    className="myBlock__Content"
  >
    children text
  </div>
</div>
`;

exports[`block with a textnode Helper before content (tag: false) 1`] = `
<div
  className="myBlock"
>
  hewwo
  <div
    className="myBlock__Content"
  >
    children text
  </div>
</div>
`;

exports[`block with an array as the content of an element 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    lol
    whatever
  </div>
  children text
</div>
`;

exports[`block with an array as the content of an element, but as a list 1`] = `
<div
  className="myList"
>
  <div
    className="myList__Item"
  >
    lol
  </div>
  <div
    className="myList__Item"
  >
    whatever
  </div>
  children text
</div>
`;

exports[`block with custom state constructor (faulty) 1`] = `
<div
  className="myBlock"
>
  hello
</div>
`;

exports[`block with custom state constructor 1`] = `
<a
  bar="baz"
  className="myBlock myBlock_foo"
  href="#yep"
>
  hello
</a>
`;

exports[`block with elem that appears only when another elem is defined (disabled by false) 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    hi
  </div>
  children text
</div>
`;

exports[`block with elem that appears only when another elem is defined (disabled by null) 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    hi
  </div>
  children text
</div>
`;

exports[`block with elem that appears only when another elem is defined (nothing rendered) 1`] = `
<div
  className="myBlock"
>
  children text
</div>
`;

exports[`block with elem that appears only when another elem is defined 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Dependant"
  />
  <div
    className="myBlock__Helper"
  >
    hi
  </div>
  children text
</div>
`;

exports[`block with optional before & after inside a wrapper which should render just before 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Content"
  >
    <div
      className="myBlock__NestedBefore"
    >
      what
    </div>
    children text
  </div>
</div>
`;

exports[`block with passing content to an element through props (passing proper element) 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    <span
      className="helperContent"
    />
  </div>
  children text
</div>
`;

exports[`block with passing content to an element through props (passing proper element, with a modifier) 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper myBlock__Helper_test"
  >
    <span
      className="helperContent"
    />
  </div>
  children text
</div>
`;

exports[`block with passing content to an element through props (passing proper element, with an overridden modifier) 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper myBlock__Helper_test2"
  >
    <span
      className="helperContent"
    />
  </div>
  children text
</div>
`;

exports[`block with passing content to an element through props 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    Hello, helper!
  </div>
  children text
</div>
`;

exports[`block with passing content to an element through props using an object 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    Hello, helper!
  </div>
  children text
</div>
`;

exports[`block with passing content to an element through props using an object with props 1`] = `
<div
  className="myBlock"
>
  <a
    className="myBlock__Helper myBlock__Helper_elemMod"
    href="#x"
  >
    Hello, helper!
  </a>
  children text
</div>
`;

exports[`should NOT become a button as a non-neutral type given 1`] = `
<input
  className="myButton"
  type="button"
/>
`;

exports[`should become a button based on an attrubute 1`] = `
<button
  className="myButton"
  type="button"
/>
`;

exports[`should become a label based on an attrubute 1`] = `
<label
  className="myLabel"
  htmlFor="myID"
/>
`;

exports[`should become a label based on an attrubute, even when defined as a span 1`] = `
<label
  className="myLabel"
  htmlFor="myID"
/>
`;

exports[`should become a radio button based on an attrubute 1`] = `
<input
  className="myRadio"
  type="radio"
/>
`;

exports[`should become a reset button based on an attrubute 1`] = `
<button
  className="myResetButton"
  type="reset"
/>
`;

exports[`should become a submit button based on an attrubute 1`] = `
<button
  className="mySubmitButton"
  type="submit"
/>
`;

exports[`should become an anchor based on an attrubute 1`] = `
<a
  className="myLink"
  href="#x"
/>
`;

exports[`should become an anchor based on an attrubute, even when defined as a button 1`] = `
<a
  className="myLink"
  href="#x"
/>
`;

exports[`should become an image based on an attrubute 1`] = `
<img
  className="myImage"
  src="kitten.jpg"
/>
`;

exports[`simple block with a Before, and a complex After, and a modifier, and an extraClass 1`] = `
<div
  className="myBlock extraClass myBlock_mod extraClass_mod"
>
  <div
    className="extraClass__Before myBlock__Before"
  />
  <div
    className="ChildBlock"
  >
    some inner text
  </div>
  <div
    className="extraClass__After myBlock__After"
  >
    <div
      className="extraClass__After__Inner myBlock__After__Inner"
    />
  </div>
</div>
`;

exports[`simple block with a Content wrapper 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Content"
  >
    children text
  </div>
</div>
`;

exports[`simple block with a Content wrapper which is a span 1`] = `
<div
  className="myBlock"
>
  <span
    className="myBlock__Content"
  >
    children text
  </span>
</div>
`;

exports[`simple block with a Content wrapper which is a span and have an extra class 1`] = `
<div
  className="myBlock"
>
  <span
    className="extraContentClassname myBlock__Content"
  >
    children text
  </span>
</div>
`;

exports[`simple block with a Content wrapper which is a span and have an extra class via tagString 1`] = `
<div
  className="myBlock"
>
  <span
    className="extraContentClassname myBlock__Content"
  >
    children text
  </span>
</div>
`;

exports[`simple block with a Helper containing an array of extra elems at inline context 1`] = `
<span
  className="myInlineBlock"
>
  <span
    className="myInlineBlock__Helper"
  >
    <span
      className="class2"
    />
    <span
      className="class2"
    />
  </span>
  children text
</span>
`;

exports[`simple block with a Helper containing an extra elem at inline context 1`] = `
<span
  className="myInlineBlock"
>
  <span
    className="myInlineBlock__Helper"
  >
    <span
      className="class2"
    />
  </span>
  children text
</span>
`;

exports[`simple block with a Helper item before children 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  />
  children text
</div>
`;

exports[`simple block with a Helper item before children using a button tag on parent 1`] = `
<button
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  />
  children text
</button>
`;

exports[`simple block with a Helper item before children with inline context 1`] = `
<span
  className="myInlineBlock"
>
  <span
    className="myInlineBlock__Helper"
  />
  children text
</span>
`;

exports[`simple block with a Helper item before children with list context 1`] = `
<ul
  className="myListBlock"
>
  <li
    className="myListBlock__Helper"
  />
  children text
</ul>
`;

exports[`simple block with a Helper item before children with list nested in normal item 1`] = `
<div
  className="myBlock"
>
  <ul
    className="myBlock__myListHelper"
  >
    <li
      className="myBlock__myListHelper__Item"
    />
  </ul>
  children text
</div>
`;

exports[`simple block with a Helper item before children with nested list context 1`] = `
<ul
  className="myListBlock"
>
  <li
    className="myListBlock__Helper"
  >
    <div
      className="myListBlock__Helper__Item"
    />
  </li>
  children text
</ul>
`;

exports[`simple block with a Helper item before children with select context 1`] = `
<select
  className="mySelectBlock"
>
  <option
    className="mySelectBlock__Helper"
  />
  children text
</select>
`;

exports[`simple block with a Helper item before children with some added props 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
    hidden={true}
    title="Oh wow"
  />
  children text
</div>
`;

exports[`simple block with a Helper item before children with some added props based on parent attrs 1`] = `
<div
  className="myBlock"
  title="Oh wow"
>
  <div
    className="myBlock__Helper"
    title="Oh wow!!!"
  />
  children text
</div>
`;

exports[`simple block with a Helper item that have a string content 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    I am a helper
  </div>
  children text
</div>
`;

exports[`simple block with a Helper item that have a string content which is later overrided 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    Overriding content!
  </div>
  children text
</div>
`;

exports[`simple block with a classLess Helper item before children 1`] = `
<div
  className="myInlineBlock"
>
  <div />
  children text
</div>
`;

exports[`simple block with a nameless item before children (using props) 1`] = `
<div
  className="myBlock"
>
  <div
    className="myHelper"
  />
  children text
</div>
`;

exports[`simple block with a nameless item before children 1`] = `
<div
  className="myBlock"
>
  <div
    className="myHelper"
  />
  children text
</div>
`;

exports[`simple block with a nameless item before children just by content 1`] = `
<div
  className="myBlock"
>
  <div>
    hewwo
  </div>
  children text
</div>
`;

exports[`simple block with a nested Helper item that should be rendered with diff modifiers on diff elements 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper myBlock__Helper_a1"
  >
    <div
      className="myBlock__Helper2 myBlock__Helper2_a2"
    >
      <div
        className="myBlock__Helper3 myBlock__Helper3_a3"
      />
    </div>
  </div>
  children text
</div>
`;

exports[`simple block with a nested Helper item that should have proper content rendered 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    <div
      className="myBlock__Helper2"
    >
      <div
        className="myBlock__Helper3"
      >
        rendered
      </div>
    </div>
  </div>
  children text
</div>
`;

exports[`simple block with an item before children just from tagString and complexy structure 1`] = `
<div
  className="myInlineBlock"
>
  <span
    className="foobar foobar_mod"
  >
    plaintext
  </span>
  children text
</div>
`;

exports[`simple block with an optional Helper item that should be rendered as it was passed on call 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    I am a Helper
  </div>
  children text
</div>
`;

exports[`simple block with an optional Helper item that should be rendered as it was passed on call but as a boolean 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  />
  children text
</div>
`;

exports[`simple block with an optional Helper item that should be rendered as it was passed on call but as an contentless object with a modifier 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper myBlock__Helper_elmo_whee"
  />
  children text
</div>
`;

exports[`simple block with an optional Helper item that should not be rendered 1`] = `
<div
  className="myBlock"
>
  children text
</div>
`;

exports[`simple block with an optional nested Helper item that should be properly rendered 1`] = `
<div
  className="myBlock"
>
  <div
    className="myBlock__Helper"
  >
    <div
      className="myBlock__Helper__Content"
    >
      I am a Helper
    </div>
  </div>
  children text
</div>
`;

exports[`simple block with an optional nested Helper item that should not be rendered 1`] = `
<div
  className="myBlock"
>
  children text
</div>
`;

exports[`simple block with defaulty content 1`] = `
<div
  className="myBlock"
>
  children text
</div>
`;

exports[`with a calculated component given as \`isTag\` prop (faulty) 1`] = `
<em
  className="foo"
>
  Hello
</em>
`;

exports[`with a calculated component given as \`isTag\` prop 1`] = `
<span
  className="wrappedComponent foo foo_foo"
>
  Hello
</span>
`;

exports[`with a more complex nested context 1`] = `
<ol>
  <li>
    Item
    <strong>
      <span>
        with 
      </span>
      <span>
        spans
      </span>
    </strong>
    <div>
      And a new line
    </div>
  </li>
</ol>
`;

exports[`with a nested Helpers containing an extra elem at inner inline context 1`] = `
<div
  className="myBlock"
>
  <span
    className="myBlock__InlineHelper"
  >
    <span
      className="myBlock__Helper2"
    >
      <span
        className="class2"
      />
    </span>
  </span>
  children text
</div>
`;

exports[`with a nested Helpers containing an extra elem at inner inline context overridden by label 1`] = `
<span
  className="myInlineBlock"
>
  <label
    className="myInlineBlock__LabelHelper"
  >
    <span
      className="myInlineBlock__Helper2"
    />
    <span
      className="myInlineBlock__Helper3"
    >
      <span
        className="class2"
      />
    </span>
  </label>
  children text
</span>
`;

exports[`with a wrapped component 1`] = `
<span
  className="wrappedComponent wrapComponent externalClassname wrappedComponent_mod_value wrapComponent_mod_value externalClassname_mod_value"
/>
`;

exports[`with block that has multiple classes and with an element that has a tagString 1`] = `
<div
  className="myBlock1 myBlock2 myBlock1_blockMod_value myBlock2_blockMod_value"
>
  <span
    className="extraElemClass extraElemCallClass myBlock1__myElem myBlock2__myElem extraElemClass_elemMod_value extraElemCallClass_elemMod_value myBlock1__myElem_elemMod_value myBlock2__myElem_elemMod_value"
  />
</div>
`;

exports[`with boolean modifier 1`] = `
<div
  className="block block_mod"
/>
`;

exports[`with class name only 1`] = `
<div
  className="block block_mod_value"
/>
`;

exports[`with component given as \`isTag\` prop 1`] = `
<a
  className="wrappedComponent foo foo_foo"
  href="#x"
>
  Hello
</a>
`;

exports[`with element created through __BemtoElem prop 1`] = `
<div
  className="myBlock myBlock_blockMod_value"
>
  <div
    className="myBlock__MyElem"
  />
</div>
`;

exports[`with element created through __BemtoElem prop with more extensive options  1`] = `
<div
  className="myBlock myBlock_blockMod_value"
>
  <span
    className="myBlock__MyElem myBlock__MyElem_elemMod_value"
  />
</div>
`;

exports[`with falsey boolean modifier 1`] = `
<div
  className="block"
/>
`;

exports[`with id and class name, and local id 1`] = `
<div
  className="block block_mod_value"
  id="newId"
/>
`;

exports[`with modifiers for helper passed in the modifiers object based on other props 1`] = `
<div
  className="block"
  power={9042}
  title="hello"
>
  <div
    className="block__Helper block__Helper_hasTitle block__Helper_titleText_hello block__Helper_moreThan9000"
  />
</div>
`;

exports[`with modifiers passed as configuration keys 1`] = `
<div
  className="block block_modWithVal_value block_modBool block_modNum_2"
/>
`;

exports[`with modifiers passed in the modifiers object 1`] = `
<div
  className="block block_modWithVal_value block_modBool block_modNum_2"
/>
`;

exports[`with modifiers passed in the modifiers object based on other props (absense) 1`] = `
<div
  className="block"
/>
`;

exports[`with modifiers passed in the modifiers object based on other props 1`] = `
<div
  className="block block_hasTitle block_titleText_hello block_moreThan9000"
  power={9042}
  title="hello"
/>
`;

exports[`with modifiers passed in the modifiers object based on other props which are then overriden 1`] = `
<div
  className="block block_titleText_goodbye"
  power={9042}
  title="hello"
/>
`;

exports[`with modifiers passed in the modifiers object while having an element (on top level) 1`] = `
<div
  className="block block_modWithVal_value block_modBool block_modNum_2"
>
  <div
    className="block__Helper block__Helper_elemModWithVal_value block__Helper_elemModBool block__Helper_elemModNum_2"
  />
</div>
`;

exports[`with modifiers passed in the modifiers object while having an element 1`] = `
<div
  className="block block_modWithVal_value block_modBool block_modNum_2"
>
  <div
    className="block__Helper block__Helper_elemModWithVal_value block__Helper_elemModBool block__Helper_elemModNum_2"
  />
</div>
`;

exports[`with multiple a class, some attributes and a child block 1`] = `
<h1
  className="class1 class1_mod_value"
  id="Unique"
  title="hello"
>
  <span
    className="class2"
  />
</h1>
`;

exports[`with multiple classes 1`] = `
<div
  className="block1 block2 block1_mod_value block2_mod_value"
/>
`;

exports[`with multiple classes at different places and multiple modifiers 1`] = `
<div
  className="defClass1 defClass2 callClass1 callClass2 defClass1_mod1_value defClass1_mod2 defClass1_mod3_value defClass2_mod1_value defClass2_mod2 defClass2_mod3_value callClass1_mod1_value callClass1_mod2 callClass1_mod3_value callClass2_mod1_value callClass2_mod2 callClass2_mod3_value"
/>
`;

exports[`with multiple external classes 1`] = `
<div
  className="block1 block2 block1_mod_value block2_mod_value"
/>
`;

exports[`with multiple ids in definition 1`] = `
<span
  className="block block_mod_value"
  id="id1"
/>
`;

exports[`with multiple nested bemto blocks in inline context 1`] = `
<span
  className="inlineClass1"
>
  <span
    className="class2"
  >
    <span
      className="class3"
    />
  </span>
</span>
`;

exports[`with nested bemto block in inline context 1`] = `
<span
  className="inlineClass1"
>
  <span
    className="class2"
  />
</span>
`;

exports[`with nested bemto block in list context 1`] = `
<ul
  className="listClass1"
>
  <li
    className="class2"
  />
</ul>
`;

exports[`with nested bemto block in select context 1`] = `
<select
  className="selectClass1"
>
  <option
    className="class2"
  />
</select>
`;

exports[`with onclick as predefined function 1`] = `
<a
  href="#x"
  onClick={[Function]}
/>
`;

exports[`with simple element 1`] = `
<div
  className="myBlock myBlock_blockMod_value"
>
  <div
    className="myBlock__myElem myBlock__myElem_elemMod_value"
  />
</div>
`;

exports[`with simple element using chaining 1`] = `
<div
  className="myBlock myBlock_blockMod_value"
>
  <div
    className="myBlock__MyElem myBlock__MyElem_elemMod_value"
  />
</div>
`;

exports[`with some default props 1`] = `
<div
  title="title!"
/>
`;

exports[`with some prop as function 1`] = `
<a
  href="#x"
  onClick={[Function]}
  tabIndex={1}
/>
`;

exports[`with some prop as function, based on another prop (faulty) 1`] = `<button />`;

exports[`with some prop as function, based on another prop (truth-y) 1`] = `
<a
  href="#x"
  tabIndex={1}
/>
`;

exports[`with tag and explicit class name 1`] = `
<span
  className="block block_mod_value"
/>
`;

exports[`with tag and explicit id and class name 1`] = `
<span
  className="block block_mod_value"
  id="id"
/>
`;

exports[`with tag given as \`isTag\` prop 1`] = `
<strong
  className="foo"
>
  Hello
</strong>
`;

exports[`with tag name and external className (options as an object with a parsed tag) 1`] = `
<span
  className="block block_mod_value"
/>
`;

exports[`with tag name and external className (options as an object) 1`] = `
<span
  className="block block_mod_value"
/>
`;

exports[`with tag name and external className 1`] = `
<div
  className="block block_mod_value"
/>
`;

exports[`with tagString as well as with options 1`] = `
<strong
  className="optCls tgsClsnm block optCls_mod_value tgsClsnm_mod_value block_mod_value"
  id="optID"
/>
`;

exports[`with two simple nested elements using chaining 1`] = `
<div
  className="myBlock myBlock_blockMod_value"
>
  <div
    className="myBlock__MyElem myBlock__MyElem_elemMod_value"
  >
    <div
      className="myBlock__MyElem2 myBlock__MyElem2_elem2Mod_value"
    />
  </div>
</div>
`;

exports[`without anything, but with external className  (options as an empty object) 1`] = `
<div
  className="block block_mod_value"
/>
`;

exports[`without anything, but with external className 1`] = `
<div
  className="block block_mod_value"
/>
`;
